datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserType {
  SUPERADMIN
  ADMIN
  USER
}

model AuthorizedUser {
  id           Int              @id @default(autoincrement())
  email        String           @unique
  type         UserType         @default(USER)
  createdBy    Int?
  creator      AuthorizedUser?  @relation("UserHierarchy", fields: [createdBy], references: [id])
  createdUsers AuthorizedUser[] @relation("UserHierarchy")
}

// Users of the system
model PatientTestUser {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  password String
  userType UserType  @default(USER) @map("user_type")
  patients Patient[]
}

// Each patient linked to a PatientTestUser
model Patient {
  id          Int             @id @default(autoincrement())
  name        String
  age         Int?
  city        String?
  fatherName  String?
  motherName  String?
  uniqueId    String?         @unique
  phoneNumber String?
  score       Int             @default(0)
  userId      Int
  user        PatientTestUser @relation(fields: [userId], references: [id])
  responses   UserResponse[]
}

// Test Levels
model TestLevel {
  id        Int        @id @default(autoincrement())
  level     Int        @unique
  screens   Screen[]
}

// Screens within a test level
model Screen {
  id           Int        @id @default(autoincrement())
  screenNumber Int
  testLevelId  Int
  testLevel    TestLevel  @relation(fields: [testLevelId], references: [id])
  questions    Question[]
  images       Image[]

  @@unique([testLevelId, screenNumber])
}

// Images for each screen
model Image {
  id       Int    @id @default(autoincrement())
  url      String
  screenId Int
  screen   Screen @relation(fields: [screenId], references: [id])
}

model Question {
  id          Int            @id @default(autoincrement())
  text        String
  screenId    Int
  screen      Screen         @relation(fields: [screenId], references: [id])
  options     Option[]
  answerId    Int?
  answer      Option?        @relation("AnswerOption", fields: [answerId], references: [id])
  responses   UserResponse[]
}

model Option {
  id             Int            @id @default(autoincrement())
  text           String
  questionId     Int
  question       Question       @relation(fields: [questionId], references: [id])
  questionAnswer Question[]     @relation("AnswerOption") // one-to-many from Option to Question
  userResponses  UserResponse[]
}

// User responses per question
model UserResponse {
  id         Int      @id @default(autoincrement())
  patientId  Int
  questionId Int
  selectedId Int
  patient    Patient  @relation(fields: [patientId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
  selected   Option   @relation(fields: [selectedId], references: [id])
  isCorrect  Boolean  @default(false)
  createdAt  DateTime @default(now())
}
